{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 Menlo-Regular;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid1\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab560
\pard\pardeftab560\partightenfactor0

\f0\b\fs40 \cf0 Some background on Python\
\pard\pardeftab560\slleading20\pardirnatural\partightenfactor0

\f1\b0\fs26 \cf0 \
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 All the things we manipulate in Python are objects.\
Some of these are simple objects\
	- numbers (whole numbers or with decimal fractional parts)\
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls1\ilvl1
\fs24 \cf0 {\listtext	\uc0\u8259 	}
\fs26 characters\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs26 strings\
\ls1\ilvl1
\fs24 {\listtext	\uc0\u8259 	}
\fs26 truth values - True or False\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 We can invent our own objects \
Firstly we can combine the above, simple, objects and secondly we can create new types objects either from scratch or from existing types of objects.\
\
These types of objects are called classes.\
\
We can combine simple types in 3 main ways.\
\
1  we can make lists of them\
2 We can make dictionaries \
3  we can make things called tuples. A tuple s just a number of things considered together.\
	Some examples would be \
\pard\pardeftab560\pardirnatural\partightenfactor0
\ls2\ilvl0
\f2\fs18 \cf0 {\listtext	\uc0\u8226 	}
\f1\fs26 a pair of x and y coordinates is a tuple of two number values. \
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 a persons name could be a tuple of two strings (first and last name)\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 a playing card could be represented as a tuple of value and suit.\
\ls2\ilvl0
\f2\fs18 {\listtext	\uc0\u8226 	}
\f1\fs26 another pair as the values of volume anon the left and right channel of a mixer.\
\pard\pardeftab560\slleading20\partightenfactor0
\cf0 \
When we make completely new classes we use the class keyword\
\
We see a lot of statements like this in python.\
\
			volume = oldvolume *2\
			area = radius*radius*pi\
			me = \'93Adrian\'94\
\
These all have the general form \
			\
			name = expression\
\
Where the expression on the right of the equals sign is some way of calculating or producing a value and the equals sign causes the value we get to be given the name we specify on the left.\
}